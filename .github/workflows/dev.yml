name: Nestjs CI

on:
  push:
    branches: [dev]

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: 20.x
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Run lint
  #       run: npm run lint
  #     - name: Run tests
  #       run: npm test

  # test:
  #   needs: lint
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node-version: [16.x, 18.x, 20.x]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Run lint
  #       run: npm run lint
  #     - name: Run tests
  #       run: npm test

  deploy:
    ## needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            ### 프로젝트 디렉토리로 이동
            ### cd /home/ubuntu/cicd/2mergency-project
            cd /home/ubuntu/2mergency-project

            ### GitHub에서 최신 코드를 가져옴
            git pull

            ## .env 파일 생성
            echo "DB_NAME=${{ secrets.DB_NAME }}" > .env
            echo "DB_SYNC=${{ secrets.DB_SYNC }}" >> .env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "PASSWORD_HASH_ROUNDS=${{ secrets.PASSWORD_HASH_ROUNDS }}" >> .env
            echo "ROLE_ADMIN_PASSWORD=${{ secrets.ROLE_ADMIN_PASSWORD }}" >> .env
            echo "MAILER_HOST=${{ secrets.MAILER_HOST }}" >> .env
            echo "MAILER_EMAIL=${{ secrets.MAILER_EMAIL }}" >> .env
            echo "MAILER_PASSWORD=${{ secrets.MAILER_PASSWORD }}" >> .env
            echo "S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}" >> .env
            echo "S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}" >> .env
            echo "S3_REGION=${{ secrets.S3_REGION }}" >> .env
            echo "S3_BUCKET=${{ secrets.S3_BUCKET }}" >> .env

            # node 관련 환경 설정 가져오기 위해 실행
            # source /home/ubuntu/.nvm/nvm.sh
            # 서버 실행 시크립트 가동! #
            # source /home/ubuntu/cicd/2mergency-project/run.sh
            source /home/ubuntu/2mergency-project/run.sh
            # dev에 cicd 잘되었는지 확인
